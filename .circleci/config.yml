#
# CircleCI Integration Tests.
# Run locally with circleci local:
#
#   `circleci build`
#
# For using anchors in circle.yml see https://circleci.com/docs/2.0/writing-yaml/#anchors-and-aliases
#
# NOTE: As of today 2018-11 circleci local doesn't
#       support caching.
#
anchors:
- key_cache: &key_cache v1-cache-{{ checksum "pom.xml" }}

version: 2.1

references:
  restore_cache: &restore_cache
    # restore the saved cache after the first run or if `pom.xml` has changed
    # REMEMBER: cache doesn't affect local builds
    restore_cache:
      key: *key_cache
  install_dependencies: &install_dependencies
     run: mvn dependency:go-offline # gets the project dependencies
  save_cache: &save_cache
    save_cache: # saves the project dependencies
      paths:
        - ~/.m2
      key: *key_cache

jobs:
  build: &base
    working_directory: ~/caldav4j
    # Build in the primary docker container
    #  and connecting to the baikal server provided
    #  by the second container.
    docker:
      - image: circleci/openjdk:8-jdk-browsers
      - image: ioggstream/baikal:with-testuser
    steps:
    - checkout
    - <<: *restore_cache
    - <<: *install_dependencies
    - <<: *save_cache
    - run: mvn test-compile -B -V
    - persist_to_workspace:
        root: .
        paths:
          - .

  test:
    <<: *base
    steps:
    - attach_workspace:
        at: .
    - run: mvn package -B -V -Dcaldav4jUri="http://testuser:testuser@localhost/cal.php/calendars/testuser/"

  owasp:
    docker:
      - image: circleci/openjdk:11-jdk-browsers
    steps:
      - attach_workspace:
            at: .
      - run: mvn org.owasp:dependency-check-maven:check -s .circleci/settings.xml -Dmaven.test.skip
  lint:
    docker:
      - image: circleci/openjdk:11-jdk-browsers
    steps:
      - attach_workspace:
          at: .
      - run: mvn spotless:check -s .circleci/settings.xml -Dmaven.test.skip
  deploy:
    <<: *base
    steps:
    # Reuse the workspace from the build job
    - attach_workspace:
        at: .

    - run:
        name: "If a release is not tagged, exit: only tagged release should be deployed"
        command: |-
          IS_SNAPSHOT=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate \
            -Dexpression=project.version |& grep -o 'SNAPSHOT$' | head -1) || true
          echo "$IS_SNAPSHOT"
          if [ "$CIRCLE_BRANCH" == "master" -a "$IS_SNAPSHOT" == "" ]; then
            circleci step halt
          fi
    - run:
        name: import GPG key
        command: echo -e "$GPG_KEY" | gpg --import --no-tty --batch --yes

    - run: gpg --list-keys

    - run:
        command: |
          echo use-agent >> ~/.gnupg/gpg.conf
          echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
          echo RELOADAGENT | gpg-connect-agent

      # Tests are run before signing.
    - run:
        command: |-
          mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version |& grep 'SNAPSHOT$' && MOPTS+=" -Dgpg.skip=true -Pcentral " || true
          echo MOPTS=$MOPTS
          mvn deploy -B -V -Dmaven.test.skip -Ddependency-check.skip=true $MOPTS -s .circleci/settings.xml


workflows:
  version: 2
  continuous-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
                - devel
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - owasp:
         requires:
          - build
      - deploy:
          requires:
            - owasp
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
                - devel
  test-only:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
                - devel
                - tags
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - owasp:
          requires:
            - build
